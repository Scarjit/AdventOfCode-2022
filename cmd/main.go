package main

import (
	"context"
	"fmt"
	"github.com/united-manufacturing-hub/umh-utils/logger"
	"go.uber.org/zap"
	"io"
	"net/http"
	"os"
	"time"
)

type AOC interface {
	prepare(string) error
	run1()
	run2()
}

func main() {
	// Initialize zap logging
	_ = logger.New("LOGGING_LEVEL")
	downloadInputs()
}

func downloadInputs() {
	session, sessionSet := os.LookupEnv("SESSION")
	if !sessionSet {
		zap.S().Fatal("SESSION environment variable not set")
	}
	// inputs folder
	inputsFolder := "inputs"

	// Get all inputs from 01.12.2022 to current date (if earlier then 24.12.2022)

	currentTime := time.Now()
	year, month, day := currentTime.Date()
	if year != 2022 {
		day = 24
	}
	if month != 12 {
		day = 24
	}

	for i := 1; i <= day; i++ {
		// Check if input already exists
		if _, err := os.Stat(fmt.Sprintf("%s/%d.txt", inputsFolder, i)); os.IsNotExist(err) {
			zap.S().Infof("Downloading input %d.txt", i)

			// Get input for day i
			// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
			var req *http.Request
			req, err = http.NewRequestWithContext(
				context.Background(),
				"GET",
				fmt.Sprintf("https://adventofcode.com/2022/day/%d/input", i),
				http.NoBody)
			if err != nil {
				zap.S().Fatal(err)
			}
			req.Header.Set("Authority", "adventofcode.com")
			req.Header.Set(
				"Accept",
				"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
			req.Header.Set("Accept-Language", "en-US,en;q=0.9")
			req.Header.Set("Cache-Control", "max-age=0")
			req.Header.Set("Cookie", fmt.Sprintf("session=%s", session))
			req.Header.Set("Dnt", "1")
			req.Header.Set("Upgrade-Insecure-Requests", "1")
			req.Header.Set("User-Agent", "github.com/Scarjit/AdventOfCode-2022")

			var resp *http.Response
			resp, err = http.DefaultClient.Do(req)
			if err != nil {
				zap.S().Fatal(err)
			}

			// Create file
			var f *os.File
			f, err = os.Create(fmt.Sprintf("%s/%d.txt", inputsFolder, i))
			if err != nil {
				zap.S().Fatal(err)
			}
			// Write body to file
			_, err = io.Copy(f, resp.Body)
			if err != nil {
				zap.S().Fatal(err)
			}
			err = f.Close()
			if err != nil {
				zap.S().Fatal(err)
			}
			err = resp.Body.Close()
			if err != nil {
				zap.S().Fatal(err)
			}
		}
	}
}
